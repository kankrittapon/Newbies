import asyncio
import time
from datetime import datetime
import requests
from playwright.async_api import async_playwright, Page, TimeoutError as PlaywrightTimeoutError
from bot_check import solve_bot_challenge
from minigame import solve_minigame
from line_login import perform_line_login, set_ui_helpers

ROCKETBOOKING_URL = "https://popmartth.rocket-booking.app/booking"

# ---------- CDP attach helpers ----------
async def wait_for_cdp_endpoints(port: int = 9222, timeout: float = 20.0):
    url = f"http://127.0.0.1:{port}/json/version"
    deadline = time.time() + timeout
    last_json = None
    while time.time() < deadline:
        try:
            resp = await asyncio.to_thread(requests.get, url, timeout=1)
            if resp.status_code == 200:
                try:
                    last_json = resp.json()
                except Exception:
                    last_json = None
                http_base = f"http://127.0.0.1:{port}"
                ws_url = None
                if isinstance(last_json, dict):
                    ws_url = last_json.get("webSocketDebuggerUrl") or last_json.get("websocketDebuggerUrl")
                if not ws_url:
                    ws_url = f"ws://127.0.0.1:{port}/devtools/browser"
                return http_base, ws_url
        except Exception:
            pass
        await asyncio.sleep(0.3)
    raise RuntimeError(f"CDP endpoint not available on port {port} after {timeout:.1f}s")

async def attach_to_chrome(port: int = 0, progress_callback=None):
    http_base, ws_url = await wait_for_cdp_endpoints(port)
    if progress_callback:
        progress_callback(f"üîå ‡∏û‡∏ö CDP endpoint ‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï {port} ‚Äì ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
    playwright = await async_playwright().start()
    browser = None
    try:
        try:
            browser = await playwright.chromium.connect_over_cdp(http_base, timeout=8000)
        except Exception as e1:
            if progress_callback:
                progress_callback(f"‚ö†Ô∏è ‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô HTTP endpoint ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e1} ‚Äì ‡∏•‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô WS ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            browser = await playwright.chromium.connect_over_cdp(ws_url, timeout=8000)

        if browser.contexts:
            context = browser.contexts[0]
            page = context.pages[0] if context.pages else await context.new_page()
        else:
            context = await browser.new_context()
            page = await context.new_page()

        if progress_callback:
            progress_callback("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ CDP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return playwright, browser, context, page
    except Exception as e:
        try:
            await playwright.stop()
        except Exception:
            pass
        raise e

# ---------- resilient interaction helpers ----------
async def safe_click(page: Page, selector: str, bot_elements: dict, progress_callback=None, retries=3):
    for attempt in range(1, retries + 1):
        try:
            await page.click(selector, timeout=10000)
            return True
        except PlaywrightTimeoutError:
            if progress_callback:
                progress_callback(f"‚ö†Ô∏è (Attempt {attempt}) ‡πÑ‡∏°‡πà‡∏û‡∏ö element '{selector}' ‚Äì ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó...")
            if not await solve_bot_challenge(page, bot_elements, progress_callback):
                return False
        except Exception as e:
            if progress_callback:
                progress_callback(f"‚ö†Ô∏è (Attempt {attempt}) error ‡∏Ñ‡∏•‡∏¥‡∏Å '{selector}': {e} ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó...")
            if not await solve_bot_challenge(page, bot_elements, progress_callback):
                return False
        await asyncio.sleep(0.5)
    if progress_callback:
        progress_callback(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å '{selector}' ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á {retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    return False

async def safe_wait_for_selector(page: Page, selector: str, bot_elements: dict, progress_callback=None, timeout=30000, retries=3):
    for attempt in range(1, retries + 1):
        try:
            await page.wait_for_selector(selector, state="visible", timeout=timeout)
            return True
        except PlaywrightTimeoutError:
            if progress_callback:
                progress_callback(f"‚ö†Ô∏è (Attempt {attempt}) Element '{selector}' ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó...")
            if not await solve_bot_challenge(page, bot_elements, progress_callback):
                return False
        except Exception as e:
            if progress_callback:
                progress_callback(f"‚ö†Ô∏è (Attempt {attempt}) error ‡∏£‡∏≠ '{selector}': {e} ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó...")
            if not await solve_bot_challenge(page, bot_elements, progress_callback):
                return False
        await asyncio.sleep(0.5)
    if progress_callback:
        progress_callback(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏≠ selector '{selector}' ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á {retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    return False

# ---------- booking logic ----------
async def perform_real_booking(
    page: Page, all_api_data: dict,
    site_name: str, selected_branch: str, selected_day: str,
    selected_time: str, register_by_user: bool,
    confirm_by_user: bool, progress_callback=None,
    round_index: int | None = None,
    timer_seconds: float | None = None,
    delay_seconds: float | None = None,
    auto_line_login: bool | None = False,
    line_email: str | None = None,
    user_profile_name: str | None = None,
    enable_fallback: bool | None = False
):
    if site_name != "ROCKETBOOKING":
        if progress_callback:
            progress_callback(f"‚ùå ‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà ROCKETBOOKING ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Site: {site_name}")
        return

    rb_data = all_api_data.get("rocketbooking", {}) or {}
    # mapping selectors (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö flat ‡πÅ‡∏•‡∏∞ pmrocket)
    if isinstance(rb_data.get("pmrocket"), dict):
        web_elements = dict(rb_data.get("pmrocket") or {})
    else:
        web_elements = dict(rb_data)

    # ‚úÖ ‡∏ú‡∏π‡∏Å ui_helpers ‡πÉ‡∏´‡πâ line_login ‡πÉ‡∏ä‡πâ
    ui = (rb_data.get("ui_helpers") or {})
    try:
        set_ui_helpers(ui)
    except Exception:
        pass

    target_url = (rb_data.get("url") or web_elements.get("url") or ROCKETBOOKING_URL)

    if not web_elements:
        if progress_callback:
            progress_callback(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{site_name}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå config")
        return

    bot_elements = {}
    if isinstance(rb_data.get("bot_check"), dict):
        bot_elements = rb_data.get("bot_check")
    elif "bot_check" in rb_data:
        bot_elements = rb_data["bot_check"]

    if progress_callback:
        progress_callback(f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå {site_name} ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó...")

    # ‡∏õ‡∏£‡∏±‡∏ö map ‡∏Ñ‡∏µ‡∏¢‡πå selector ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° payload ‡πÄ‡∏î‡∏¥‡∏°
    try:
        if "date_button" not in web_elements and web_elements.get("calendar_day_button_prefix"):
            web_elements["date_button"] = web_elements["calendar_day_button_prefix"] + "{}" + ")"
        if "time_button" not in web_elements and web_elements.get("time_buttons_prefix"):
            web_elements["time_button"] = web_elements["time_buttons_prefix"] + "{}" + ")"
        if "branch_buttons_base" not in web_elements:
            if web_elements.get("branch_buttons"):
                web_elements["branch_buttons_base"] = web_elements["branch_buttons"]
            elif web_elements.get("branch_list"):
                web_elements["branch_buttons_base"] = web_elements["branch_list"]
        if "next_button_after_branch" not in web_elements and web_elements.get("branch_next_button"):
            web_elements["next_button_after_branch"] = web_elements["branch_next_button"]
        if "confirm_selection_button" not in web_elements and web_elements.get("datetime_next_button"):
            web_elements["confirm_selection_button"] = web_elements["datetime_next_button"]
        if "confirm_booking_button" not in web_elements and web_elements.get("confirm_button"):
            web_elements["confirm_booking_button"] = web_elements["confirm_button"]
    except Exception:
        pass

    await page.goto(target_url, wait_until="networkidle")

    # ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    try:
        logo_ok = await page.is_visible("img.logo", timeout=3000)
    except Exception:
        logo_ok = False
    if not logo_ok:
        try:
            await page.evaluate("() => setTimeout(() => window.location.reload(), 500)")
            await page.wait_for_load_state("networkidle")
        except Exception:
            pass

    if not await solve_bot_challenge(page, bot_elements, progress_callback):
        return

    # --- auto LINE login (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ---
    if auto_line_login:
        try:
            if progress_callback:
                progress_callback("üë§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô LINE...")
            prof_selectors = [
                "button:has-text('Profile')",
                "a:has-text('Profile')",
                "button:has-text('‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå')",
                "a:has-text('‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå')",
                "button[aria-label*='profile' i]",
            ]
            clicked_profile = False
            for sel in prof_selectors:
                try:
                    if await page.is_visible(sel, timeout=1000):
                        await page.click(sel)
                        clicked_profile = True
                        break
                except Exception:
                    pass
            if not clicked_profile:
                try:
                    await page.click("button:has([class*='profile']), div:has-text('‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå')", timeout=1000)
                except Exception:
                    pass

            try:
                await page.wait_for_load_state("networkidle", timeout=5000)
            except Exception:
                pass

            try:
                connect_probe = ", ".join([
                    "button:has-text('Connect LINE')",
                    "button:has-text('Connect')",
                    "a:has-text('Connect LINE')",
                    "a:has-text('Connect')",
                    "button:has-text('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE')",
                    "a:has-text('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE')",
                ])
                for _ in range(10):
                    if await page.is_visible(connect_probe, timeout=1000):
                        break
                    await asyncio.sleep(0.5)
            except Exception:
                pass

            ok = await perform_line_login(page, progress_callback, preferred_email=line_email)
            if ok and progress_callback:
                progress_callback("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LINE: ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
            if not ok:
                if progress_callback:
                    progress_callback("‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô LINE ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return
        except Exception as _e:
            if progress_callback:
                progress_callback(f"‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô LINE ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {_e}")
            return

    # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô Connect LINE ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡πä‡∏Å auto
    try:
        connect_sel = ", ".join([
            "button:has-text('Connect LINE')",
            "button:has-text('Connect')",
            "a:has-text('Connect LINE')",
            "a:has-text('Connect')",
            "button:has-text('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE')",
            "a:has-text('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE')",
        ])
        need_login = await page.is_visible(connect_sel, timeout=2000)
    except Exception:
        need_login = False
    if (not auto_line_login) and need_login and progress_callback:
        progress_callback("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô LINE (‡∏ï‡∏¥‡πä‡∏Å '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)")

    # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Register ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î ---
    register_button_selector = web_elements.get("register_button")
    if not register_button_selector:
        if progress_callback:
            progress_callback("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Selector ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Register")
        return

    if not await safe_wait_for_selector(page, register_button_selector, bot_elements, progress_callback):
        if progress_callback:
            progress_callback("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Register ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á")
        return

    try:
        start = time.time()
        while True:
            style = await page.get_attribute(register_button_selector, "style")
            style = style or ""
            if "222, 222, 222" not in style.replace(" ", ""):
                break
            if timer_seconds and (time.time() - start) > float(timer_seconds):
                if progress_callback:
                    progress_callback("‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠ Register Active ‡∏ï‡∏≤‡∏° Timer")
                break
            await asyncio.sleep(0.05)
    except Exception:
        pass

    if progress_callback:
        progress_callback("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Register ‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á...")

    # Optional: after Register becomes clickable, re-try opening branch container a few times
    if enable_fallback:
        try:
            branch_container = web_elements.get("branch_buttons_base") or web_elements.get("branch_list")
            if branch_container:
                for _ in range(4):
                    try:
                        await page.wait_for_selector(branch_container, state="visible", timeout=2000)
                        break
                    except Exception:
                        await safe_click(page, register_button_selector, bot_elements, progress_callback)
                        await asyncio.sleep(0.4)
        except Exception:
            pass

    try:
        open_date_selector = web_elements.get("open_date_container")
        open_date_text = await page.inner_text(open_date_selector, timeout=10000)
        booking_datetime_str = open_date_text.replace("Open: ", "").strip()
        booking_datetime = datetime.strptime(booking_datetime_str, "%Y-%m-%d %H:%M:%S")
        if booking_datetime < datetime.now():
            if progress_callback:
                progress_callback(f"‡πÄ‡∏à‡∏≠‡∏õ‡∏∏‡πà‡∏° Register ‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô Booking ({booking_datetime_str})!")
            return
        if progress_callback:
            progress_callback(f"‚úÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {booking_datetime_str}")
    except Exception as e:
        if progress_callback:
            progress_callback(f"‡πÄ‡∏à‡∏≠‡∏õ‡∏∏‡πà‡∏° Register ‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô Booking! (‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {e})")
        return

    # --- ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î Register / ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
    if register_by_user:
        if progress_callback:
            progress_callback("üö® ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏î Register ‡πÄ‡∏≠‡∏á...")
    else:
        if not await safe_click(page, register_button_selector, bot_elements, progress_callback):
            return
        if progress_callback:
            progress_callback("‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Register ‡πÅ‡∏•‡πâ‡∏ß!")

    # --- ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ---
    try:
        if await page.is_visible("input#firstname", timeout=3000):
            from utils import load_user_profile_by_name
            profile = load_user_profile_by_name(user_profile_name)
            if profile:
                if progress_callback:
                    progress_callback("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå...")
                if profile.get("Firstname"):
                    await page.fill("input#firstname", str(profile.get("Firstname")))
                if profile.get("Lastname"):
                    await page.fill("input#lastname", str(profile.get("Lastname")))
                try:
                    if profile.get("Gender"):
                        await page.click("div.ant-select-selector")
                        await page.keyboard.press("Enter")
                except Exception:
                    pass
                if profile.get("ID"):
                    await page.fill("input#ID", str(profile.get("ID")))
                if profile.get("Phone"):
                    await page.fill("input#tel", str(profile.get("Phone")))
                try:
                    await page.dispatch_event("input[type='checkbox']", "click")
                except Exception:
                    pass
                try:
                    await page.get_by_text("Next", exact=True).click()
                except Exception:
                    pass
    except Exception:
        pass

    # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Branch ---
    if progress_callback:
        progress_callback("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Branch...")
    branch_buttons_base_selector = web_elements.get("branch_buttons_base")
    branch_found = False
    for _ in range(5):
        branch_selector = f"{branch_buttons_base_selector}:has-text('{selected_branch}')"
        if await page.is_visible(branch_selector):
            if delay_seconds:
                try:
                    await page.wait_for_timeout(int(float(delay_seconds) * 1000))
                except Exception:
                    pass
            if not await safe_click(page, branch_selector, bot_elements, progress_callback):
                # If cannot click target branch, try fallback to any clickable branch
                if enable_fallback:
                    try:
                        btns = page.locator(f"{branch_buttons_base_selector} button, {branch_buttons_base_selector} [role='button']")
                        cnt = await btns.count()
                        for i in range(cnt):
                            b = btns.nth(i)
                            try:
                                dis = await b.is_disabled()
                            except Exception:
                                dis = False
                            if not dis:
                                await b.click()
                                branch_found = True
                                if progress_callback:
                                    progress_callback("‚ÑπÔ∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏ó‡∏ô")
                                break
                    except Exception:
                        pass
                    if branch_found:
                        break
                return
            if progress_callback:
                progress_callback(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Branch '{selected_branch}' ‡πÅ‡∏•‡πâ‡∏ß!")
            branch_found = True
            break
        else:
            if progress_callback:
                progress_callback("‚ö†Ô∏è Branch ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
            await page.click("body")
            await asyncio.sleep(2)

    # Fallback: choose first clickable branch if enabled
    if (not branch_found) and enable_fallback:
        try:
            btns = page.locator(f"{branch_buttons_base_selector} button, {branch_buttons_base_selector} [role='button']")
            cnt = await btns.count()
            for i in range(cnt):
                b = btns.nth(i)
                try:
                    dis = await b.is_disabled()
                except Exception:
                    dis = False
                if not dis:
                    await b.click()
                    branch_found = True
                    if progress_callback:
                        progress_callback("‚ÑπÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô")
                    break
        except Exception:
            pass

    if not branch_found:
        if progress_callback:
            progress_callback("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Branch ‡πÑ‡∏î‡πâ! ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á...")
        return

    next_button_selector = web_elements.get("next_button_after_branch")
    if not await safe_click(page, next_button_selector, bot_elements, progress_callback):
        return

    # --- ‡∏ï‡∏£‡∏ß‡∏à minigame/canvas ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô ---
    try:
        if await page.is_visible("canvas", timeout=2000):
            if progress_callback:
                progress_callback("üéÆ ‡∏û‡∏ö‡∏°‡∏¥‡∏ô‡∏¥‡πÄ‡∏Å‡∏° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ...")
            await solve_minigame(page)
    except Exception:
        pass

    # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô ---
    if progress_callback:
        progress_callback("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô...")
    date_selector = web_elements.get("date_button").format(selected_day)
    if delay_seconds:
        try:
            await page.wait_for_timeout(int(float(delay_seconds) * 1000))
        except Exception:
            pass
    if not await safe_click(page, date_selector, bot_elements, progress_callback):
        if enable_fallback:
            try:
                container = web_elements.get("date_picker_container") or "#calendar-grid"
                await page.wait_for_selector(container, timeout=4000)
                loc = page.locator(f"{container} button:not([disabled])")
                if await loc.count() > 0:
                    await loc.first.click()
                    if progress_callback:
                        progress_callback("‚ÑπÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô")
                else:
                    return
            except Exception:
                return
    if progress_callback:
        progress_callback(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {selected_day} ‡πÅ‡∏•‡πâ‡∏ß!")

    # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ ---
    if progress_callback:
        progress_callback("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤...")
    if round_index is not None:
        try:
            prefix = web_elements.get("time_buttons_prefix")
            if prefix and "> button:nth-child(" in prefix:
                container = prefix.split(" > button:nth-child(")[0]
            else:
                container = web_elements.get("time_buttons_base_selector") or web_elements.get("time_buttons_base")
            if container:
                await page.wait_for_selector(container, state="visible", timeout=15000)
                if delay_seconds:
                    try:
                        await page.wait_for_timeout(int(float(delay_seconds) * 1000))
                    except Exception:
                        pass
                buttons = page.locator(f"{container} button:not([class*='disabledTime'])")
                count = await buttons.count()
                idx = max(0, min(round_index, count - 1))
                await buttons.nth(idx).click()
                if progress_callback:
                    progress_callback(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ (‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {idx+1}) ‡πÅ‡∏•‡πâ‡∏ß!")
            else:
                time_selector = web_elements.get("time_button").format(selected_time)
                if delay_seconds:
                    try:
                        await page.wait_for_timeout(int(float(delay_seconds) * 1000))
                    except Exception:
                        pass
                await page.click(time_selector)
        except Exception as e:
            if progress_callback:
                progress_callback(f"‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡∏£‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return
    else:
        time_selector = web_elements.get("time_button").format(selected_time)
        if delay_seconds:
            try:
                await page.wait_for_timeout(int(float(delay_seconds) * 1000))
            except Exception:
                pass
        if not await safe_click(page, time_selector, bot_elements, progress_callback):
            if enable_fallback:
                try:
                    container = web_elements.get("time_buttons_base_selector") or web_elements.get("time_buttons_base")
                    if container:
                        await page.wait_for_selector(container, state="visible", timeout=4000)
                        buttons = page.locator(f"{container} button:not([class*='disabledTime'])")
                        if await buttons.count() > 0:
                            await buttons.first.click()
                            if progress_callback:
                                progress_callback("‚ÑπÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏î‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô")
                        else:
                            return
                    else:
                        return
                except Exception:
                    return
        if progress_callback:
            progress_callback(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ {selected_time} ‡πÅ‡∏•‡πâ‡∏ß!")

    # --- ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤ ---
    datetime_next_button_selector = web_elements.get("confirm_selection_button")
    if not await safe_click(page, datetime_next_button_selector, bot_elements, progress_callback):
        return
    try:
        await page.evaluate("""
            () => {
              setTimeout(() => {
                const interval = setInterval(() => {
                  const container = document.querySelector('div.wholePage.datePicker');
                  if (!container) return;
                  const buttons = Array.from(container.querySelectorAll('button'))
                    .filter(b => /Confirm/i.test(b.textContent||''));
                  buttons.forEach(btn => btn.click());
                }, 80);
                setTimeout(() => clearInterval(interval), 2000);
              }, 180);
            }
        """)
    except Exception:
        pass

    # --- Checkbox + Confirm booking ---
    if progress_callback:
        progress_callback("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡πä‡∏Å Checkbox...")
    checkbox_selector = web_elements.get("checkbox")
    if not await safe_wait_for_selector(page, checkbox_selector, bot_elements, progress_callback):
        return
    await page.check(checkbox_selector)
    if progress_callback:
        progress_callback("‚úÖ ‡∏ï‡∏¥‡πä‡∏Å Checkbox ‡πÅ‡∏•‡πâ‡∏ß!")

    confirm_booking_selector = web_elements.get("confirm_booking_button")
    if confirm_by_user:
        if progress_callback:
            progress_callback("üö® ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏î Confirm Booking ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á...")
    else:
        try:
            await page.evaluate("""
                () => {
                  setTimeout(() => {
                    const interval = setInterval(() => {
                      const container = document.querySelector('div.InfoPage') || document.body;
                      const buttons = Array.from(container.querySelectorAll('button'))
                        .filter(b => /Confirm/i.test(b.textContent||''));
                      buttons.forEach(btn => btn.click());
                    }, 120);
                    setTimeout(() => clearInterval(interval), 5000);
                  }, 300);
                }
            """)
        except Exception:
            pass
        if not await safe_click(page, confirm_booking_selector, bot_elements, progress_callback):
            return
        if progress_callback:
            progress_callback("‚úÖ ‡∏Å‡∏î Confirm Booking ‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
